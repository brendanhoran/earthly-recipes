# This Earthfile atempts to build all the tools and toolchain/build systems
# needed for the  FPGA dev kit:  https://github.com/emard/ulx3s
# Should also be fine with any of the Lattice ECP5 based devices.
# First time this Eathfile is run will take a long time due to lots of dependices
# and a lot of tooling that needs to be built.
#
# Very much work in progress
# All build tooling works
#

FROM debian:stable-slim

# Update apt and install build time dependences
RUN apt update && \
    DEBIAN_FRONTEND=noninteractive apt install -y \
    git wget unzip libtool libftdi-dev libftdi1-2 libftdi1-dev libhidapi-libusb0 libhidapi-dev \
    libudev-dev cmake pkg-config make g++ gnat llvm-dev clang zlib1g-dev python3 python3-dev \
    libboost-dev libboost-filesystem-dev libboost-program-options-dev libboost-dev srecord \
    libboost-thread-dev libboost-iostreams-dev tcl-dev libreadline-dev bison flex libeigen3-dev

# Build openFPGALoader, used to flash the bitstream (.bit files)
# https://github.com/emard/ulx3s/blob/master/doc/MANUAL.md#programming-options
RUN git clone https://github.com/trabucayre/openFPGALoader.git
RUN cd openFPGALoader && mkdir build
RUN cd openFPGALoader/build && cmake ../ -DCMAKE_INSTALL_PREFIX=/usr
RUN cd openFPGALoader/build && cmake --build .
RUN cd openFPGALoader/build && make install

# Build ftx_prog, used to set factory defaults
# https://github.com/emard/ulx3s/blob/master/doc/MANUAL.md#usb-port-us1-factory-default
RUN git clone https://github.com/richardeoin/ftx-prog.git
RUN cd ftx-prog && make
RUN cd ftx-prog && mv ftx_prog /usr/bin/

# Build OpenOCD from latest source so we get ft231x support.
# https://github.com/emard/ulx3s/blob/master/doc/MANUAL.md#programming-options
RUN  git clone git://git.code.sf.net/p/openocd/code openocd
RUN cd openocd && ./bootstrap
RUN cd openocd && ./configure --enable-ftdi --prefix=/usr/
RUN cd openocd && make
RUN cd openocd && make install

# Build ghdl with LLVM backend, CLI tooling for analyzer, compiler, simulator.
# https://github.com/ghdl/ghdl
RUN git clone https://github.com/ghdl/ghdl.git
RUN cd ghdl && mkdir build
RUN cd ghdl/build && ../configure --with-llvm-config --prefix=/usr/
RUN cd ghdl/build && make
RUN cd ghdl/build && make install

# Yosys the open synthesis suite, used for Verilog synthesis
# https://github.com/YosysHQ/yosys
RUN git clone https://github.com/YosysHQ/yosys.git
# Set install prefix to /usr, vs /usr/local
RUN sed -i "s@^PREFIX.*@PREFIX=/usr@" yosys/Makefile
RUN cd yosys && make config-clang
RUN cd yosys && make
RUN cd yosys && make install

# ECP5 device database and tools for bitstream creation, used by nextpnr.
# Uses Yosys
# https://github.com/YosysHQ/prjtrellis
RUN git clone --recursive https://github.com/YosysHQ/prjtrellis
RUN cd prjtrellis/libtrellis && cmake -DCMAKE_INSTALL_PREFIX=/usr/ .
RUN cd prjtrellis/libtrellis && make
RUN cd prjtrellis/libtrellis && make install

# Build nextpnr, pre generate chipdb's for ECP5 devices, nextpnr is a place and route tool.
# Depends on prjtrellis
# https://github.com/YosysHQ/nextpnr
RUN git clone https://github.com/YosysHQ/nextpnr.git
# Split out chip DB generation(for ECP5 boards only) from main program compile to help with layer caching
RUN cd nextpnr/ecp5 && cmake . -DTRELLIS_INSTALL_PREFIX=/usr -DTRELLIS_LIBDIR=/usr/lib/x86_64-linux-gnu/trellis
RUN cd nextpnr/ecp5 && make
# Now build and install nextpnr 
RUN cd nextpnr && cmake . -DARCH=ecp5 -DCMAKE_INSTALL_PREFIX=/usr/ -DECP5_CHIPDB=/nextpnr/ecp5/chipdb
RUN cd nextpnr && make
RUN cd nextpnr && make install

test:
    # Bogus stage to test build section. WIP
    RUN which openocd
    RUN which ftx_prog
    RUN which openFPGALoader
    RUN which ghdl
    RUN which nextpnr-ecp5
    RUN which ecppack
    RUN which ecpmulti
    RUN which yosys